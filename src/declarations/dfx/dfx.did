type UserInfoWithUid = 
 record {
   avatar: opt text;
   firstname: text;
   lastname: text;
   uid: text;
 };
type UserInfo = 
 record {
   avatar: opt text;
   firstname: text;
   lastname: text;
 };
type UidType = text;
type SerializedJsonType = text;
type Result_4 = 
 variant {
   err: Error;
   ok: ContentChunk;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: ContentInfo;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: SerializedJsonType;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: UserInfoWithUid;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Error = 
 variant {
   anonymous: text;
   assetAlreadyExists: text;
   assetCommit: text;
   assetInitialize: text;
   assetNotFound: text;
   assetOutOfBoundAccess: text;
   fetch: text;
   userAlreadyExists: text;
   userDoesnotExist: text;
 };
type DebugUserInfo = 
 record {
   fileSystem: text;
   "principal": principal;
   settings: vec record {
                   UidType;
                   text;
                 };
   userInfo: UserInfo;
 };
type DataType = text;
type ContentInfo = 
 record {
   dtype: DataType;
   name: text;
   size: nat;
   totalChunks: nat;
   uid: UidType;
 };
type ContentChunk = 
 record {
   chunk: Content;
   chunkId: ChunkId;
 };
type Content = blob;
type ChunkId = nat;
service : {
  addAssetChunk: (UidType, ContentChunk) -> (Result);
  commitAssetChunk: (UidType) -> (Result);
  createUser: (UserInfo, opt SerializedJsonType) -> (Result);
  deleteAsset: (UidType) -> (Result);
  deleteFromSettings: (UidType) -> (Result);
  fetchAssetChunkById: (UidType, ChunkId) -> (Result_4) query;
  fetchAssetInfo: (UidType) -> (Result_3) query;
  fetchFileSystem: () -> (Result_2) query;
  fetchSetting: (UidType) -> (Result_2) query;
  fetchUserInfo: () -> (Result_1) query;
  initiateAssetUpload: (ContentInfo, opt bool) -> (Result);
  reset: () -> ();
  showAllInAssetPermBuffer: () ->
   (vec record {
          text;
          record {
            buffer: vec ContentChunk;
            info: ContentInfo;
          };
        }) query;
  showAllInAssetTempBuffer: () ->
   (vec
     record {
       text;
       record {
         buffer: vec opt ContentChunk;
         info: ContentInfo;
       };
     }) query;
  showAllUsers: () -> (vec DebugUserInfo) query;
  updateFileSystem: (SerializedJsonType) -> (Result);
  updateSetting: (UidType, SerializedJsonType) -> (Result);
}
